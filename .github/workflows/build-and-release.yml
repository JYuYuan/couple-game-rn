name: Build and Release

on:
  workflow_run:
    workflows: ["Prepare Build Environment"]   # 依赖的 workflow 名字
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=2048m -Dorg.gradle.daemon=false

    steps:
      # 1️⃣ 获取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ 缓存 Node.js + Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      # 3️⃣ 缓存 Gradle
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4️⃣ 安装 Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5️⃣ 安装 Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses || true

      # 6️⃣ 缓存 Expo CLI
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # 7️⃣ 安装依赖
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 8️⃣ 设置环境变量 + 修复 local.properties
      - name: Fix Android SDK location
        run: |
          echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
          mkdir -p android
          echo "sdk.dir=/opt/android-sdk" > ./android/local.properties

      # 9️⃣ 获取版本号
      - name: Determine release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # 🔟 本地构建 APK
      - name: Build APK locally
        run: |
          echo "🏗️ 开始本地构建 APK..."
          npx eas build --platform android --profile preview --local --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # 1️⃣1️⃣ 查找生成的 APK 文件
      - name: Find APK file
        id: find_apk
        run: |
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "❌ 未找到 APK 文件"
            exit 1
          fi
          echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT
          echo "✅ 找到 APK 文件: $APK_FILE"

      # 1️⃣2️⃣ 创建 Release 并上传 APK
      - name: Create GitHub Release and Upload APK
        run: |
          echo "📦 创建 release ${{ steps.get_tag.outputs.tag }}"

          RELEASE_NOTES="🚀 **卿轻游 ${{ steps.get_tag.outputs.tag }}**

          ## 📱 安装说明
          下载 \`${{ steps.find_apk.outputs.apk_name }}\` 文件并安装到 Android 设备

          ## 🔧 构建信息
          - 构建时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Node.js: $(node --version)
          - 平台: Android
          - 构建方式: 本地构建

          ---
          🤖 此版本由 GitHub Actions 自动构建"

          gh release create "${{ steps.get_tag.outputs.tag }}" \
            "${{ steps.find_apk.outputs.apk_path }}" \
            --title "🎮 卿轻游 ${{ steps.get_tag.outputs.tag }}" \
            --notes "$RELEASE_NOTES" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
