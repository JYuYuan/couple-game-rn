name: Build and Release

on:
  # 方式一：push tag 时触发
  push:
    tags:
      - 'v*'
  # 方式二：手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=2048m -Dorg.gradle.daemon=false
      EXPO_NO_DOTENV: 1
      CI: false  # 禁用 CI 模式，模拟本地环境
    steps:
      # 1️⃣ 获取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ 设置 Node.js 环境（匹配你的本地版本）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # 确保这个版本与你本地一致

      # 3️⃣ 设置 Java 环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4️⃣ 设置 Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      # 4️⃣.5 Accept Android licenses
      - name: Accept Android licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

      # 4️⃣.6 设置环境变量
      - name: Setup environment variables
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
      # 5️⃣ 显示本地环境信息（用于对比）
      - name: Show environment info for comparison
        run: |
          echo "🔍 请对比以下信息与你的本地环境："
          echo "Node.js: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo ""
          echo "package.json 内容:"
          cat package.json
          echo ""
          echo "检查 eas.json:"
          cat eas.json || echo "eas.json 不存在"
          echo ""
          echo "检查 app.json:"
          cat app.json || echo "app.json 不存在"
          echo ""
          echo "检查 app.config.js:"
          cat app.config.js || echo "app.config.js 不存在"
      # 6️⃣ 完全清理并重新安装（模拟本地环境）
      - name: Clean install (like local)
        run: |
          # 完全清理
          rm -rf node_modules
          rm -rf .expo
          rm -rf android/build
          rm -rf ios/build
          rm -f yarn.lock
          rm -f package-lock.json
          
          # 使用 yarn 安装（如果你本地用 yarn）
          npm install -g yarn
          yarn install
          
          # 或者使用 npm（如果你本地用 npm）
          # npm install
      # 7️⃣ 安装全局工具（使用与本地相同的版本）
      - name: Install global tools
        run: |
          # 安装 eas-cli（检查你本地的版本）
          npm list -g eas-cli || true
          npm install -g eas-cli@latest
          
          # 安装 expo-cli（如果需要）
          npm install -g expo-cli@latest
          
          echo "已安装的全局包:"
          npm list -g --depth=0
      # 8️⃣ 设置 Expo（使用本地相同的方式）
      - name: Setup Expo
        run: |
          # 如果你本地需要登录
          if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
            npx expo login --non-interactive -u ${{ secrets.EXPO_USERNAME }} || true
          fi
      # 9️⃣ 调试：检查所有依赖
      - name: Debug - Check all dependencies
        run: |
          echo "📦 检查 node_modules 中的 expo 相关包:"
          ls -la node_modules | grep expo || true
          echo ""
          echo "检查 expo-router:"
          ls -la node_modules/expo-router || echo "expo-router 未找到"
          echo ""
          echo "package.json 中的依赖:"
          cat package.json | jq '.dependencies' || cat package.json
      # 🔟 尝试运行 expo config（调试用）
      - name: Debug - Run expo config
        run: |
          echo "🔍 尝试运行 expo config..."
          npx expo config --type public || {
            echo "❌ expo config 失败，尝试其他方法..."
            npx expo config || true
          }
      # 1️⃣1️⃣ 预构建（使用本地相同的命令）
      - name: Prebuild (like local)
        run: |
          echo "📦 预构建..."
          # 如果你本地使用这个命令
          npx expo prebuild --platform android --clean
          
          # 或者如果你本地不需要预构建，跳过这步
      # 1️⃣2️⃣ 获取版本号
      - name: Determine release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      # 1️⃣3️⃣ 构建 APK（使用与本地完全相同的命令）
      - name: Build APK (exact local command)
        run: |
          echo "🏗️ 开始构建..."
          echo "请确保以下命令与你本地使用的完全一致："
          
          # 创建输出目录
          mkdir -p ./build
          
          # 使用你本地的确切命令
          # 选项 1: 如果你本地使用 eas build
          eas build --platform android --profile preview --local --non-interactive --output ./build/couple-game.apk
          
          # 选项 2: 如果你本地使用 expo build
          # npx expo build:android -t apk
          
          # 选项 3: 如果你本地使用 gradle
          # cd android && ./gradlew assembleRelease
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EAS_BUILD_SKIP_CREDENTIALS_CHECK: 1
          EAS_NO_VCS_IGNORE_CHECK: 1

      # 后续步骤保持不变...
      - name: Find APK file
        id: find_apk
        run: |
          APK_FILE=$(find . -name "*.apk" -type f ! -path "./node_modules/*" | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "❌ 未找到 APK 文件"
            find . -type f -name "*.apk"
            exit 1
          fi
          echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT

      # 1️⃣2️⃣ 创建 release 并上传 APK
      - name: Create GitHub Release and Upload APK
        run: |
          echo "📦 创建 release ${{ steps.get_tag.outputs.tag }}"
          
          # 生成 release notes
          RELEASE_NOTES="🚀 **卿轻游 ${{ steps.get_tag.outputs.tag }}**

          ## 📱 安装说明
          下载 \`${{ steps.find_apk.outputs.apk_name }}\` 文件并安装到 Android 设备

          ## 🔧 构建信息
          - 构建时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Node.js: $(node --version)
          - 平台: Android
          - 构建方式: 本地构建

          ## 📋 更新内容
          请查看最近的提交记录了解详细更新内容。

          ---
          🤖 此版本由 GitHub Actions 自动构建"

          # 创建 release
          gh release create "${{ steps.get_tag.outputs.tag }}" \
            "${{ steps.find_apk.outputs.apk_path }}" \
            --title "🎮 卿轻游 ${{ steps.get_tag.outputs.tag }}" \
            --notes "$RELEASE_NOTES" \
            --draft=false \
            --prerelease=false

          echo "✅ Release 创建成功！"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
