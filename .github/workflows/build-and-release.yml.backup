name: Build and Release

on:
  # 方式一：push tag 时触发
  push:
    tags:
      - 'v*'
  # 方式二：手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=2048m -Dorg.gradle.daemon=false
      EXPO_NO_DOTENV: 1
      CI: false  # 禁用 CI 模式，模拟本地环境
    steps:
      # 1️⃣ 获取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 必须完整拉取 tag 历史

      # 2️⃣ 设置 Node.js 环境（匹配你的本地版本）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # 确保这个版本与你本地一致

      # 3️⃣ 设置 Java 环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4️⃣ 设置 Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      # 4️⃣.5 Accept Android licenses
      - name: Accept Android licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

      # 4️⃣.6 设置环境变量
      - name: Setup environment variables
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
      # 5️⃣ 显示本地环境信息（用于对比）
      - name: Show environment info for comparison
        run: |
          echo "🔍 请对比以下信息与你的本地环境："
          echo "Node.js: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo ""
          echo "package.json 内容:"
          cat package.json
          echo ""
          echo "检查 eas.json:"
          cat eas.json || echo "eas.json 不存在"
          echo ""
          echo "检查 app.json:"
          cat app.json || echo "app.json 不存在"
          echo ""
          echo "检查 app.config.js:"
          cat app.config.js || echo "app.config.js 不存在"
      # 6️⃣ 完全清理并重新安装（模拟本地环境）
      - name: Clean install (like local)
        run: |
          # 完全清理
          rm -rf node_modules
          rm -rf .expo
          rm -rf android/build
          rm -rf ios/build
          rm -f yarn.lock
          rm -f package-lock.json
          
          # 使用 yarn 安装（如果你本地用 yarn）
          npm install -g yarn
          yarn install
          
          # 或者使用 npm（如果你本地用 npm）
          # npm install
      # 7️⃣ 安装全局工具（使用与本地相同的版本）
      - name: Install global tools
        run: |
          # 安装 eas-cli（检查你本地的版本）
          npm list -g eas-cli || true
          npm install -g eas-cli@latest
          
          # 安装 expo-cli（如果需要）
          npm install -g expo-cli@latest
          
          echo "已安装的全局包:"
          npm list -g --depth=0
      # 8️⃣ 设置 Expo（使用本地相同的方式）
      - name: Setup Expo
        run: |
          # 如果你本地需要登录
          if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
            npx expo login --non-interactive -u ${{ secrets.EXPO_USERNAME }} || true
          fi
      # 9️⃣ 调试：检查所有依赖
      - name: Debug - Check all dependencies
        run: |
          echo "📦 检查 node_modules 中的 expo 相关包:"
          ls -la node_modules | grep expo || true
          echo ""
          echo "检查 expo-router:"
          ls -la node_modules/expo-router || echo "expo-router 未找到"
          echo ""
          echo "package.json 中的依赖:"
          cat package.json | jq '.dependencies' || cat package.json
      # 🔟 尝试运行 expo config（调试用）
      - name: Debug - Run expo config
        run: |
          echo "🔍 尝试运行 expo config..."
          npx expo config --type public || {
            echo "❌ expo config 失败，尝试其他方法..."
            npx expo config || true
          }
      # 1️⃣1️⃣ 预构建（使用本地相同的命令）
      - name: Prebuild (like local)
        run: |
          echo "📦 预构建..."
          # 如果你本地使用这个命令
          npx expo prebuild --platform android --clean
          
          # 或者如果你本地不需要预构建，跳过这步
      # 1️⃣2️⃣ 获取版本号
      - name: Determine release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      # 1️⃣3️⃣ 构建 APK（使用与本地完全相同的命令）
      - name: Build APK (exact local command)
        run: |
          echo "🏗️ 开始构建..."
          echo "请确保以下命令与你本地使用的完全一致："
          
          # 创建输出目录
          mkdir -p ./build
          
          # 使用你本地的确切命令
          # 选项 1: 如果你本地使用 eas build
          eas build --platform android --profile preview --local --non-interactive --output ./build/couple-game.apk
          
          # 选项 2: 如果你本地使用 expo build
          # npx expo build:android -t apk
          
          # 选项 3: 如果你本地使用 gradle
          # cd android && ./gradlew assembleRelease
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EAS_BUILD_SKIP_CREDENTIALS_CHECK: 1
          EAS_NO_VCS_IGNORE_CHECK: 1

      # 后续步骤保持不变...
      - name: Find APK file
        id: find_apk
        run: |
          APK_FILE=$(find . -name "*.apk" -type f ! -path "./node_modules/*" | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "❌ 未找到 APK 文件"
            find . -type f -name "*.apk"
            exit 1
          fi
          echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT

      # 上传 APK 为 artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30

  build-ios:
    runs-on: macos-latest
    env:
      EXPO_NO_DOTENV: 1
      CI: false  # 禁用 CI 模式，模拟本地环境
    steps:
      # 1️⃣ 获取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 必须完整拉取 tag 历史

      # 2️⃣ 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3️⃣ 设置 Xcode 环境
      - name: Setup Xcode
        run: |
          # 使用最新稳定版 Xcode
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      # 4️⃣ 显示 iOS 环境信息
      - name: Show iOS environment info
        run: |
          echo "🔍 iOS 构建环境信息："
          echo "Node.js: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "Xcode: $(xcodebuild -version)"
          echo "macOS: $(sw_vers -productVersion)"
          xcode-select --print-path

      # 5️⃣ 清理并安装依赖
      - name: Clean install
        run: |
          # 完全清理
          rm -rf node_modules
          rm -rf .expo
          rm -rf ios/build
          rm -f yarn.lock
          rm -f package-lock.json

          # 使用 yarn 安装
          npm install -g yarn
          yarn install

      # 6️⃣ 安装全局工具
      - name: Install global tools
        run: |
          npm install -g eas-cli@latest
          npm install -g expo-cli@latest
          echo "已安装的全局包:"
          npm list -g --depth=0

      # 7️⃣ 设置 Expo
      - name: Setup Expo
        run: |
          if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
            npx expo login --non-interactive -u ${{ secrets.EXPO_USERNAME }} || true
          fi

      # 8️⃣ 预构建 iOS
      - name: Prebuild iOS
        run: |
          echo "📦 iOS 预构建..."
          npx expo prebuild --platform ios --clean

      # 9️⃣ 安装 iOS 依赖
      - name: Install iOS dependencies
        run: |
          echo "📦 安装 CocoaPods 依赖..."
          cd ios
          # 确保 CocoaPods 是最新版本
          gem install cocoapods
          # 安装依赖
          pod install
          cd ..

      # 🔟 获取版本号
      - name: Determine release tag
        id: get_tag_ios
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # 1️⃣1️⃣ 构建未签名 IPA (使用 xcodebuild)
      - name: Build unsigned IPA with xcodebuild
        run: |
          echo "🏗️ 开始构建未签名 IPA..."

          # 创建输出目录
          mkdir -p ./build

          # 进入 iOS 目录
          cd ios

          # 显示项目信息
          echo "📋 项目信息："
          ls -la

          # 找到 .xcworkspace 或 .xcodeproj 文件
          WORKSPACE=$(find . -name "*.xcworkspace" | head -1)
          PROJECT=$(find . -name "*.xcodeproj" | grep -v Pods | head -1)

          if [ -n "$WORKSPACE" ]; then
            BUILD_TARGET="-workspace ${WORKSPACE}"
            echo "使用 workspace: $WORKSPACE"
            # 列出可用的 schemes
            echo "可用的 schemes:"
            xcodebuild -list -workspace "$WORKSPACE" 2>/dev/null | grep -A 10 "Schemes:" || true
          elif [ -n "$PROJECT" ]; then
            BUILD_TARGET="-project ${PROJECT}"
            echo "使用 project: $PROJECT"F
            # 列出可用的 schemes
            echo "可用的 schemes:"
            xcodebuild -list -project "$PROJECT" 2>/dev/null | grep -A 10 "Schemes:" || true
          else
            echo "❌ 未找到 .xcworkspace 或 .xcodeproj 文件"
            exit 1
          fi

          # 尝试几个可能的 scheme 名称
          POSSIBLE_SCHEMES=("couplegamern" "couple-game-rn" "CoupleGameRN" "main")
          SCHEME_NAME=""

          for scheme in "${POSSIBLE_SCHEMES[@]}"; do
            if xcodebuild -list $BUILD_TARGET 2>/dev/null | grep -q "$scheme"; then
              SCHEME_NAME="$scheme"
              echo "找到 scheme: $SCHEME_NAME"
              break
            fi
          done

          # 如果没找到，使用第一个可用的 scheme
          if [ -z "$SCHEME_NAME" ]; then
            SCHEME_NAME=$(xcodebuild -list $BUILD_TARGET 2>/dev/null | grep -A 20 "Schemes:" | grep -v "Schemes:" | head -1 | xargs)
            echo "使用第一个可用的 scheme: $SCHEME_NAME"
          fi

          if [ -z "$SCHEME_NAME" ]; then
            echo "❌ 未找到可用的 scheme"
            exit 1
          fi

          # 清理之前的构建
          echo "🧹 清理之前的构建..."
          xcodebuild clean $BUILD_TARGET -scheme "$SCHEME_NAME" -configuration Release

          # 构建项目（不签名）
          echo "🔨 开始构建..."
          xcodebuild archive \
            $BUILD_TARGET \
            -scheme "$SCHEME_NAME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "../build/$SCHEME_NAME.xcarchive" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE_SPECIFIER="" \
            DEVELOPMENT_TEAM="" \
            | tee ../build/build.log

          # 检查构建是否成功
          if [ ! -d "../build/$SCHEME_NAME.xcarchive" ]; then
            echo "❌ 构建失败，archive 不存在"
            echo "构建日志："
            cat ../build/build.log || true
            exit 1
          fi

          # 导出 IPA（未签名）
          echo "📦 导出未签名 IPA..."

          # 创建导出配置文件
          cat > "../build/ExportOptions.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>compileBitcode</key>
              <false/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <false/>
          </dict>
          </plist>
          EOF

          # 导出 IPA
          xcodebuild -exportArchive \
            -archivePath "../build/$SCHEME_NAME.xcarchive" \
            -exportPath "../build/" \
            -exportOptionsPlist "../build/ExportOptions.plist" \
            | tee ../build/export.log

          # 重命名 IPA 文件
          cd ../build
          if [ -f "$SCHEME_NAME.ipa" ]; then
            mv "$SCHEME_NAME.ipa" "couple-game-unsigned.ipa"
            echo "✅ 重命名 IPA: $SCHEME_NAME.ipa -> couple-game-unsigned.ipa"
          else
            # 查找任何 .ipa 文件并重命名
            IPA_FILE=$(find . -name "*.ipa" | head -1)
            if [ -n "$IPA_FILE" ]; then
              mv "$IPA_FILE" "couple-game-unsigned.ipa"
              echo "✅ 重命名 IPA: $(basename $IPA_FILE) -> couple-game-unsigned.ipa"
            else
              echo "❌ 未找到生成的 IPA 文件"
              echo "导出日志："
              cat export.log || true
              echo "构建目录内容："
              ls -la
              exit 1
            fi
          fi

          echo "✅ 构建完成！"
          ls -la

      # 1️⃣2️⃣ 查找 IPA 文件
      - name: Find IPA file
        id: find_ipa
        run: |
          cd build
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -z "$IPA_FILE" ]; then
            echo "❌ 未找到 IPA 文件"
            echo "构建目录内容："
            ls -la
            echo "查找所有可能的文件："
            find . -type f
            exit 1
          fi

          # 转换为绝对路径
          ABS_IPA_PATH=$(realpath "$IPA_FILE")

          echo "ipa_path=$ABS_IPA_PATH" >> $GITHUB_OUTPUT
          echo "ipa_name=$(basename $IPA_FILE)" >> $GITHUB_OUTPUT
          echo "✅ 找到 IPA 文件: $ABS_IPA_PATH"

      # 上传 IPA 为 artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ${{ steps.find_ipa.outputs.ipa_path }}
          retention-days: 30

  create-release:
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ 获取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ 下载构建产物
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts/

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/

      # 3️⃣ 获取版本号
      - name: Determine release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # 4️⃣ 获取提交日志
      - name: Get Commit Logs
        id: get-logs
        run: |
            # 获取所有 tag，按时间倒序排列
            TAGS=($(git tag --sort=-creatordate))

            if [ ${#TAGS[@]} -eq 0 ]; then
              echo "没有任何 tag"
              PREVIOUS_TAG=""
              CURRENT_TAG=""
            elif [ ${#TAGS[@]} -eq 1 ]; then
              echo "只有一个 tag，无法生成区间日志"
              PREVIOUS_TAG=""
              CURRENT_TAG=${TAGS[0]}
            else
              PREVIOUS_TAG=${TAGS[1]}
              CURRENT_TAG=${TAGS[0]}
            fi

            echo "Previous Tag: $PREVIOUS_TAG"
            echo "Current Tag: $CURRENT_TAG"

            if [ -n "$PREVIOUS_TAG" ]; then
              git log $PREVIOUS_TAG..$CURRENT_TAG --oneline > CHANGELOG.txt
            elif [ -n "$CURRENT_TAG" ]; then
              git log $CURRENT_TAG --oneline > CHANGELOG.txt
            else
              echo "没有可用日志" > CHANGELOG.txt
            fi

            echo "changelog<<EOF" >> $GITHUB_ENV
            cat CHANGELOG.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      # 5️⃣ 创建 release 并上传所有构建产物
      - name: Create GitHub Release and Upload Apps
        run: |
          echo "📦 创建 release ${{ steps.get_tag.outputs.tag }}"

          # 查找构建产物
          APK_FILE=$(find ./artifacts -name "*.apk" | head -1)
          IPA_FILE=$(find ./artifacts -name "*.ipa" | head -1)

          APK_NAME=$(basename "$APK_FILE" 2>/dev/null || echo "couple-game.apk")
          IPA_NAME=$(basename "$IPA_FILE" 2>/dev/null || echo "couple-game-unsigned.ipa")

          # 生成 release notes
          RELEASE_NOTES="📱 **卿轻游 ${{ steps.get_tag.outputs.tag }}**

          ## 📱 安装说明
          ### Android
          下载 \`$APK_NAME\` 文件并安装到 Android 设备

          ### iOS (未签名)
          下载 \`$IPA_NAME\` 文件，需要通过 AltStore、Sideloadly 等工具安装到 iOS 设备

          ## 🔧 构建信息
          - 构建时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - 平台: Android + iOS (未签名)
          - 构建方式: GitHub Actions 自动构建

          ## 📋 更新内容
          ${{ env.changelog }}

          ---
          🤖 此版本由 GitHub Actions 自动构建"

          # 创建 release 并上传文件
          UPLOAD_FILES=""
          [ -f "$APK_FILE" ] && UPLOAD_FILES="$UPLOAD_FILES $APK_FILE"
          [ -f "$IPA_FILE" ] && UPLOAD_FILES="$UPLOAD_FILES $IPA_FILE"

          gh release create "${{ steps.get_tag.outputs.tag }}" \
            $UPLOAD_FILES \
            --title "🎮 卿轻游 ${{ steps.get_tag.outputs.tag }}" \
            --notes "$RELEASE_NOTES" \
            --draft=false \
            --prerelease=false

          echo "✅ Release 创建成功！"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
